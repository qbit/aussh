#!/bin/ksh

#set -x

_ssh_bg=""	# background, ssh -f
_out=""		# nohup output

_command="ssh ${@}"

usage() {
	cat <<EOF
usage: 

        # start a ssh tunnel
        $ aussh host -oServerAliveInterval=5 -oServerAliveCountMax=2

        # pushing ssh process to background
        $ aussh  -oServerAliveInterval=5 -oServerAliveCountMax=2  \\
                -n -fNL 10587:smtp.example.org:587 host

EOF
	exit 1
}

# ssh_connect()
connect() {
	$_command
	if [ "$?" -eq 255 ]; then
		sleep 5
		echo "${0}: trying to reconnect"
		connect
	fi
}

ssh_connect() {
	# ^C to quit
	trap "echo exiting... ; exit" INT
	connect
}

ssh_bg_islistening() {
	grep "cannot listen to port" ${_out}
	if [ "$?" -eq 0 ]; then
		pkill -n -f "${_command}"
		rm -f ${_out}
		exit 1
	fi
}

ssh_bg_monitor_out() {
	RET=''
	set -A monitor_str \
		"Can't assign requested address" \
		"Timeout, server" \
		"Network is down" \
		"No route to host" \
		"Operation timed out" \
		"Broken pipe"

	c=${#monitor_str}
	while [[ $c -ge 0 ]]; do
		RET=$(grep "${monitor_str[$c]}" ${_out})
		if [ -n "$RET" ]; then
			echo "$RET"
			break
		fi
		c=$((c-1))
	done
	echo "$RET"
}

ssh_bg_mktemp() {
	_tmpdir="/tmp/aussh"
	if [ ! -d "${_tmpdir}" ]; then
		mkdir ${_tmpdir}
	fi
	_tmpfile=$(mktemp "${_tmpdir}"/aussh.XXXXXXXXXX) || exit 1
	chmod 0600 ${_tmpfile} || exit 1
	_out=${_tmpfile}
}

ssh_bg_connect() {
	RET=''
	trap "" HUP TERM
	ssh_bg_mktemp
	nohup $_command </dev/null >${_out} &
	wait
	ssh_bg_islistening
	while true; do
		RET=$(ssh_bg_monitor_out)
		if [ -n "$RET" ]; then
			nohup $_command </dev/null >${_out} &
			sleep 5
			ssh_bg_islistening
		fi
		sleep 5
	done &
}

# sync with ssh(1)
while getopts "1246abAB:c:e:fgi:kl:m:no:p:CD:E:F:GI:J:KL:MNO:PQ:R:S:TVw:W:XYyqstvx" \
	c; do
        case "$c" in
                f) _ssh_bg=1 ;; # `ssh -f'
                *) ;; # nothing
        esac
done
shift $((OPTIND-1))
[ $# -gt 0 ] || usage

if [ -n "$_ssh_bg" ]; then
	ssh_bg_connect
else
	ssh_connect
fi
